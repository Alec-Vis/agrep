diff -u -r --new-file agrep.335/Agrep.mak agrep.win/Agrep.mak
--- agrep.335/Agrep.mak	Wed Dec 31 19:00:00 1969
+++ agrep.win/Agrep.mak	Tue Dec 30 12:13:55 1997
@@ -0,0 +1,744 @@
+# Microsoft Developer Studio Generated NMAKE File, Based on Agrep.dsp
+!IF "$(CFG)" == ""
+CFG=Agrep - Win32 Release
+!MESSAGE No configuration specified. Defaulting to Agrep - Win32 Release.
+!ENDIF 
+
+!IF "$(CFG)" != "Agrep - Win32 Release" && "$(CFG)" != "Agrep - Win32 Debug"
+!MESSAGE Invalid configuration "$(CFG)" specified.
+!MESSAGE You can specify a configuration when running NMAKE
+!MESSAGE by defining the macro CFG on the command line. For example:
+!MESSAGE 
+!MESSAGE NMAKE /f "Agrep.mak" CFG="Agrep - Win32 Debug"
+!MESSAGE 
+!MESSAGE Possible choices for configuration are:
+!MESSAGE 
+!MESSAGE "Agrep - Win32 Release" (based on "Win32 (x86) Console Application")
+!MESSAGE "Agrep - Win32 Debug" (based on "Win32 (x86) Console Application")
+!MESSAGE 
+!ERROR An invalid configuration is specified.
+!ENDIF 
+
+!IF "$(OS)" == "Windows_NT"
+NULL=
+!ELSE 
+NULL=nul
+!ENDIF 
+
+!IF  "$(CFG)" == "Agrep - Win32 Release"
+
+OUTDIR=.
+INTDIR=.
+# Begin Custom Macros
+OutDir=.
+# End Custom Macros
+
+!IF "$(RECURSE)" == "0" 
+
+ALL : "$(OUTDIR)\Agrep.exe"
+
+!ELSE 
+
+ALL : "$(OUTDIR)\Agrep.exe"
+
+!ENDIF 
+
+CLEAN :
+	-@erase "$(INTDIR)\agrep.obj"
+	-@erase "$(INTDIR)\agrephlp.obj"
+	-@erase "$(INTDIR)\asearch.obj"
+	-@erase "$(INTDIR)\asearch1.obj"
+	-@erase "$(INTDIR)\asplit.obj"
+	-@erase "$(INTDIR)\bitap.obj"
+	-@erase "$(INTDIR)\checkfil.obj"
+	-@erase "$(INTDIR)\checksg.obj"
+	-@erase "$(INTDIR)\codepage.obj"
+	-@erase "$(INTDIR)\compat.obj"
+	-@erase "$(INTDIR)\delim.obj"
+	-@erase "$(INTDIR)\dummyfil.obj"
+	-@erase "$(INTDIR)\follow.obj"
+	-@erase "$(INTDIR)\main.obj"
+	-@erase "$(INTDIR)\maskgen.obj"
+	-@erase "$(INTDIR)\newmgrep.obj"
+	-@erase "$(INTDIR)\ntdirent.obj"
+	-@erase "$(INTDIR)\parse.obj"
+	-@erase "$(INTDIR)\preproce.obj"
+	-@erase "$(INTDIR)\recursiv.obj"
+	-@erase "$(INTDIR)\sgrep.obj"
+	-@erase "$(INTDIR)\utilitie.obj"
+	-@erase "$(INTDIR)\vc50.idb"
+	-@erase "$(OUTDIR)\Agrep.exe"
+
+CPP=cl.exe
+CPP_PROJ=/nologo /ML /W3 /GX /O2 /D "NDEBUG" /D "WIN32" /D "_CONSOLE" /D\
+ "_MBCS" /D AGREP_POINTER=1 /D HAVE_DIRENT_H=1 /Fp"$(INTDIR)\Agrep.pch" /YX /FD\
+ /c 
+CPP_OBJS=.
+CPP_SBRS=.
+
+.c{$(CPP_OBJS)}.obj::
+   $(CPP) @<<
+   $(CPP_PROJ) $< 
+<<
+
+.cpp{$(CPP_OBJS)}.obj::
+   $(CPP) @<<
+   $(CPP_PROJ) $< 
+<<
+
+.cxx{$(CPP_OBJS)}.obj::
+   $(CPP) @<<
+   $(CPP_PROJ) $< 
+<<
+
+.c{$(CPP_SBRS)}.sbr::
+   $(CPP) @<<
+   $(CPP_PROJ) $< 
+<<
+
+.cpp{$(CPP_SBRS)}.sbr::
+   $(CPP) @<<
+   $(CPP_PROJ) $< 
+<<
+
+.cxx{$(CPP_SBRS)}.sbr::
+   $(CPP) @<<
+   $(CPP_PROJ) $< 
+<<
+
+RSC=rc.exe
+BSC32=bscmake.exe
+BSC32_FLAGS=/nologo /o"$(OUTDIR)\Agrep.bsc" 
+BSC32_SBRS= \
+	
+LINK32=link.exe
+LINK32_FLAGS=setargv.obj /nologo /subsystem:console /incremental:no\
+ /pdb:"$(OUTDIR)\Agrep.pdb" /machine:I386 /out:"$(OUTDIR)\Agrep.exe" 
+LINK32_OBJS= \
+	"$(INTDIR)\agrep.obj" \
+	"$(INTDIR)\agrephlp.obj" \
+	"$(INTDIR)\asearch.obj" \
+	"$(INTDIR)\asearch1.obj" \
+	"$(INTDIR)\asplit.obj" \
+	"$(INTDIR)\bitap.obj" \
+	"$(INTDIR)\checkfil.obj" \
+	"$(INTDIR)\checksg.obj" \
+	"$(INTDIR)\codepage.obj" \
+	"$(INTDIR)\compat.obj" \
+	"$(INTDIR)\delim.obj" \
+	"$(INTDIR)\dummyfil.obj" \
+	"$(INTDIR)\follow.obj" \
+	"$(INTDIR)\main.obj" \
+	"$(INTDIR)\maskgen.obj" \
+	"$(INTDIR)\newmgrep.obj" \
+	"$(INTDIR)\ntdirent.obj" \
+	"$(INTDIR)\parse.obj" \
+	"$(INTDIR)\preproce.obj" \
+	"$(INTDIR)\recursiv.obj" \
+	"$(INTDIR)\sgrep.obj" \
+	"$(INTDIR)\utilitie.obj"
+
+"$(OUTDIR)\Agrep.exe" : "$(OUTDIR)" $(DEF_FILE) $(LINK32_OBJS)
+    $(LINK32) @<<
+  $(LINK32_FLAGS) $(LINK32_OBJS)
+<<
+
+!ELSEIF  "$(CFG)" == "Agrep - Win32 Debug"
+
+OUTDIR=.
+INTDIR=.
+# Begin Custom Macros
+OutDir=.
+# End Custom Macros
+
+!IF "$(RECURSE)" == "0" 
+
+ALL : "$(OUTDIR)\Agrep.exe"
+
+!ELSE 
+
+ALL : "$(OUTDIR)\Agrep.exe"
+
+!ENDIF 
+
+CLEAN :
+	-@erase "$(INTDIR)\agrep.obj"
+	-@erase "$(INTDIR)\agrephlp.obj"
+	-@erase "$(INTDIR)\asearch.obj"
+	-@erase "$(INTDIR)\asearch1.obj"
+	-@erase "$(INTDIR)\asplit.obj"
+	-@erase "$(INTDIR)\bitap.obj"
+	-@erase "$(INTDIR)\checkfil.obj"
+	-@erase "$(INTDIR)\checksg.obj"
+	-@erase "$(INTDIR)\codepage.obj"
+	-@erase "$(INTDIR)\compat.obj"
+	-@erase "$(INTDIR)\delim.obj"
+	-@erase "$(INTDIR)\dummyfil.obj"
+	-@erase "$(INTDIR)\follow.obj"
+	-@erase "$(INTDIR)\main.obj"
+	-@erase "$(INTDIR)\maskgen.obj"
+	-@erase "$(INTDIR)\newmgrep.obj"
+	-@erase "$(INTDIR)\ntdirent.obj"
+	-@erase "$(INTDIR)\parse.obj"
+	-@erase "$(INTDIR)\preproce.obj"
+	-@erase "$(INTDIR)\recursiv.obj"
+	-@erase "$(INTDIR)\sgrep.obj"
+	-@erase "$(INTDIR)\utilitie.obj"
+	-@erase "$(INTDIR)\vc50.idb"
+	-@erase "$(INTDIR)\vc50.pdb"
+	-@erase "$(OUTDIR)\Agrep.exe"
+	-@erase "$(OUTDIR)\Agrep.ilk"
+	-@erase "$(OUTDIR)\Agrep.pdb"
+
+CPP=cl.exe
+CPP_PROJ=/nologo /MLd /W3 /Gm /GX /Zi /Od /D "_DEBUG" /D "WIN32" /D "_CONSOLE"\
+ /D "_MBCS" /D AGREP_POINTER=1 /D HAVE_DIRENT_H=1 /Fp"$(INTDIR)\Agrep.pch" /YX\
+ /FD /c 
+CPP_OBJS=.
+CPP_SBRS=.
+
+.c{$(CPP_OBJS)}.obj::
+   $(CPP) @<<
+   $(CPP_PROJ) $< 
+<<
+
+.cpp{$(CPP_OBJS)}.obj::
+   $(CPP) @<<
+   $(CPP_PROJ) $< 
+<<
+
+.cxx{$(CPP_OBJS)}.obj::
+   $(CPP) @<<
+   $(CPP_PROJ) $< 
+<<
+
+.c{$(CPP_SBRS)}.sbr::
+   $(CPP) @<<
+   $(CPP_PROJ) $< 
+<<
+
+.cpp{$(CPP_SBRS)}.sbr::
+   $(CPP) @<<
+   $(CPP_PROJ) $< 
+<<
+
+.cxx{$(CPP_SBRS)}.sbr::
+   $(CPP) @<<
+   $(CPP_PROJ) $< 
+<<
+
+RSC=rc.exe
+BSC32=bscmake.exe
+BSC32_FLAGS=/nologo /o"$(OUTDIR)\Agrep.bsc" 
+BSC32_SBRS= \
+	
+LINK32=link.exe
+LINK32_FLAGS=setargv.obj /nologo /subsystem:console /incremental:yes\
+ /pdb:"$(OUTDIR)\Agrep.pdb" /debug /machine:I386 /out:"$(OUTDIR)\Agrep.exe"\
+ /pdbtype:sept 
+LINK32_OBJS= \
+	"$(INTDIR)\agrep.obj" \
+	"$(INTDIR)\agrephlp.obj" \
+	"$(INTDIR)\asearch.obj" \
+	"$(INTDIR)\asearch1.obj" \
+	"$(INTDIR)\asplit.obj" \
+	"$(INTDIR)\bitap.obj" \
+	"$(INTDIR)\checkfil.obj" \
+	"$(INTDIR)\checksg.obj" \
+	"$(INTDIR)\codepage.obj" \
+	"$(INTDIR)\compat.obj" \
+	"$(INTDIR)\delim.obj" \
+	"$(INTDIR)\dummyfil.obj" \
+	"$(INTDIR)\follow.obj" \
+	"$(INTDIR)\main.obj" \
+	"$(INTDIR)\maskgen.obj" \
+	"$(INTDIR)\newmgrep.obj" \
+	"$(INTDIR)\ntdirent.obj" \
+	"$(INTDIR)\parse.obj" \
+	"$(INTDIR)\preproce.obj" \
+	"$(INTDIR)\recursiv.obj" \
+	"$(INTDIR)\sgrep.obj" \
+	"$(INTDIR)\utilitie.obj"
+
+"$(OUTDIR)\Agrep.exe" : "$(OUTDIR)" $(DEF_FILE) $(LINK32_OBJS)
+    $(LINK32) @<<
+  $(LINK32_FLAGS) $(LINK32_OBJS)
+<<
+
+!ENDIF 
+
+
+!IF "$(CFG)" == "Agrep - Win32 Release" || "$(CFG)" == "Agrep - Win32 Debug"
+SOURCE=.\agrep.c
+
+!IF  "$(CFG)" == "Agrep - Win32 Release"
+
+DEP_CPP_AGREP=\
+	".\agrep.h"\
+	".\checkfil.h"\
+	".\codepage.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	".\version.h"\
+	
+
+"$(INTDIR)\agrep.obj" : $(SOURCE) $(DEP_CPP_AGREP) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "Agrep - Win32 Debug"
+
+DEP_CPP_AGREP=\
+	".\agrep.h"\
+	".\checkfil.h"\
+	".\codepage.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	".\version.h"\
+	
+
+"$(INTDIR)\agrep.obj" : $(SOURCE) $(DEP_CPP_AGREP) "$(INTDIR)"
+
+
+!ENDIF 
+
+SOURCE=.\agrephlp.c
+
+!IF  "$(CFG)" == "Agrep - Win32 Release"
+
+DEP_CPP_AGREPH=\
+	".\agrep.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	".\version.h"\
+	
+
+"$(INTDIR)\agrephlp.obj" : $(SOURCE) $(DEP_CPP_AGREPH) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "Agrep - Win32 Debug"
+
+DEP_CPP_AGREPH=\
+	".\agrep.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	".\version.h"\
+	
+
+"$(INTDIR)\agrephlp.obj" : $(SOURCE) $(DEP_CPP_AGREPH) "$(INTDIR)"
+
+
+!ENDIF 
+
+SOURCE=.\asearch.c
+
+!IF  "$(CFG)" == "Agrep - Win32 Release"
+
+DEP_CPP_ASEAR=\
+	".\agrep.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\asearch.obj" : $(SOURCE) $(DEP_CPP_ASEAR) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "Agrep - Win32 Debug"
+
+DEP_CPP_ASEAR=\
+	".\agrep.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\asearch.obj" : $(SOURCE) $(DEP_CPP_ASEAR) "$(INTDIR)"
+
+
+!ENDIF 
+
+SOURCE=.\asearch1.c
+
+!IF  "$(CFG)" == "Agrep - Win32 Release"
+
+DEP_CPP_ASEARC=\
+	".\agrep.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\asearch1.obj" : $(SOURCE) $(DEP_CPP_ASEARC) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "Agrep - Win32 Debug"
+
+DEP_CPP_ASEARC=\
+	".\agrep.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\asearch1.obj" : $(SOURCE) $(DEP_CPP_ASEARC) "$(INTDIR)"
+
+
+!ENDIF 
+
+SOURCE=.\asplit.c
+
+!IF  "$(CFG)" == "Agrep - Win32 Release"
+
+DEP_CPP_ASPLI=\
+	".\agrep.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\putils.c"\
+	".\re.h"\
+	
+
+"$(INTDIR)\asplit.obj" : $(SOURCE) $(DEP_CPP_ASPLI) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "Agrep - Win32 Debug"
+
+DEP_CPP_ASPLI=\
+	".\agrep.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\putils.c"\
+	".\re.h"\
+	
+
+"$(INTDIR)\asplit.obj" : $(SOURCE) $(DEP_CPP_ASPLI) "$(INTDIR)"
+
+
+!ENDIF 
+
+SOURCE=.\bitap.c
+
+!IF  "$(CFG)" == "Agrep - Win32 Release"
+
+DEP_CPP_BITAP=\
+	".\agrep.h"\
+	".\codepage.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\bitap.obj" : $(SOURCE) $(DEP_CPP_BITAP) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "Agrep - Win32 Debug"
+
+DEP_CPP_BITAP=\
+	".\agrep.h"\
+	".\codepage.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\bitap.obj" : $(SOURCE) $(DEP_CPP_BITAP) "$(INTDIR)"
+
+
+!ENDIF 
+
+SOURCE=.\checkfil.c
+DEP_CPP_CHECK=\
+	".\checkfil.h"\
+	".\config.h"\
+	{$(INCLUDE)}"sys\stat.h"\
+	{$(INCLUDE)}"sys\types.h"\
+	
+
+"$(INTDIR)\checkfil.obj" : $(SOURCE) $(DEP_CPP_CHECK) "$(INTDIR)"
+
+
+SOURCE=.\checksg.c
+
+!IF  "$(CFG)" == "Agrep - Win32 Release"
+
+DEP_CPP_CHECKS=\
+	".\agrep.h"\
+	".\checkfil.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\checksg.obj" : $(SOURCE) $(DEP_CPP_CHECKS) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "Agrep - Win32 Debug"
+
+DEP_CPP_CHECKS=\
+	".\agrep.h"\
+	".\checkfil.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\checksg.obj" : $(SOURCE) $(DEP_CPP_CHECKS) "$(INTDIR)"
+
+
+!ENDIF 
+
+SOURCE=.\codepage.c
+
+!IF  "$(CFG)" == "Agrep - Win32 Release"
+
+DEP_CPP_CODEP=\
+	".\agrep.h"\
+	".\codepage.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\codepage.obj" : $(SOURCE) $(DEP_CPP_CODEP) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "Agrep - Win32 Debug"
+
+DEP_CPP_CODEP=\
+	".\agrep.h"\
+	".\codepage.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\codepage.obj" : $(SOURCE) $(DEP_CPP_CODEP) "$(INTDIR)"
+
+
+!ENDIF 
+
+SOURCE=.\compat.c
+
+!IF  "$(CFG)" == "Agrep - Win32 Release"
+
+DEP_CPP_COMPA=\
+	".\agrep.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\compat.obj" : $(SOURCE) $(DEP_CPP_COMPA) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "Agrep - Win32 Debug"
+
+DEP_CPP_COMPA=\
+	".\agrep.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\compat.obj" : $(SOURCE) $(DEP_CPP_COMPA) "$(INTDIR)"
+
+
+!ENDIF 
+
+SOURCE=.\delim.c
+
+!IF  "$(CFG)" == "Agrep - Win32 Release"
+
+DEP_CPP_DELIM=\
+	".\agrep.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\delim.obj" : $(SOURCE) $(DEP_CPP_DELIM) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "Agrep - Win32 Debug"
+
+DEP_CPP_DELIM=\
+	".\agrep.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\delim.obj" : $(SOURCE) $(DEP_CPP_DELIM) "$(INTDIR)"
+
+
+!ENDIF 
+
+SOURCE=.\dummyfil.c
+
+"$(INTDIR)\dummyfil.obj" : $(SOURCE) "$(INTDIR)"
+
+
+SOURCE=.\follow.c
+DEP_CPP_FOLLO=\
+	".\re.h"\
+	
+
+"$(INTDIR)\follow.obj" : $(SOURCE) $(DEP_CPP_FOLLO) "$(INTDIR)"
+
+
+SOURCE=.\main.c
+
+!IF  "$(CFG)" == "Agrep - Win32 Release"
+
+DEP_CPP_MAIN_=\
+	".\agrep.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\main.obj" : $(SOURCE) $(DEP_CPP_MAIN_) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "Agrep - Win32 Debug"
+
+DEP_CPP_MAIN_=\
+	".\agrep.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\main.obj" : $(SOURCE) $(DEP_CPP_MAIN_) "$(INTDIR)"
+
+
+!ENDIF 
+
+SOURCE=.\maskgen.c
+
+!IF  "$(CFG)" == "Agrep - Win32 Release"
+
+DEP_CPP_MASKG=\
+	".\agrep.h"\
+	".\codepage.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\maskgen.obj" : $(SOURCE) $(DEP_CPP_MASKG) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "Agrep - Win32 Debug"
+
+DEP_CPP_MASKG=\
+	".\agrep.h"\
+	".\codepage.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\maskgen.obj" : $(SOURCE) $(DEP_CPP_MASKG) "$(INTDIR)"
+
+
+!ENDIF 
+
+SOURCE=.\newmgrep.c
+DEP_CPP_NEWMG=\
+	".\agrep.h"\
+	".\codepage.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	{$(INCLUDE)}"sys\stat.h"\
+	{$(INCLUDE)}"sys\timeb.h"\
+	{$(INCLUDE)}"sys\types.h"\
+	
+
+"$(INTDIR)\newmgrep.obj" : $(SOURCE) $(DEP_CPP_NEWMG) "$(INTDIR)"
+
+
+SOURCE=.\ntdirent.c
+DEP_CPP_NTDIR=\
+	".\ntdirent.h"\
+	
+
+"$(INTDIR)\ntdirent.obj" : $(SOURCE) $(DEP_CPP_NTDIR) "$(INTDIR)"
+
+
+SOURCE=.\parse.c
+DEP_CPP_PARSE=\
+	".\re.h"\
+	
+
+"$(INTDIR)\parse.obj" : $(SOURCE) $(DEP_CPP_PARSE) "$(INTDIR)"
+
+
+SOURCE=.\preproce.c
+
+!IF  "$(CFG)" == "Agrep - Win32 Release"
+
+DEP_CPP_PREPR=\
+	".\agrep.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\preproce.obj" : $(SOURCE) $(DEP_CPP_PREPR) "$(INTDIR)"
+
+
+!ELSEIF  "$(CFG)" == "Agrep - Win32 Debug"
+
+DEP_CPP_PREPR=\
+	".\agrep.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	
+
+"$(INTDIR)\preproce.obj" : $(SOURCE) $(DEP_CPP_PREPR) "$(INTDIR)"
+
+
+!ENDIF 
+
+SOURCE=.\recursiv.c
+DEP_CPP_RECUR=\
+	".\autoconf.h"\
+	".\config.h"\
+	".\ntdirent.h"\
+	{$(INCLUDE)}"sys\stat.h"\
+	{$(INCLUDE)}"sys\types.h"\
+	
+
+"$(INTDIR)\recursiv.obj" : $(SOURCE) $(DEP_CPP_RECUR) "$(INTDIR)"
+
+
+SOURCE=.\sgrep.c
+DEP_CPP_SGREP=\
+	".\agrep.h"\
+	".\codepage.h"\
+	".\config.h"\
+	".\defs.h"\
+	".\re.h"\
+	{$(INCLUDE)}"sys\timeb.h"\
+	
+
+"$(INTDIR)\sgrep.obj" : $(SOURCE) $(DEP_CPP_SGREP) "$(INTDIR)"
+
+
+SOURCE=.\utilitie.c
+DEP_CPP_UTILI=\
+	".\re.h"\
+	
+
+"$(INTDIR)\utilitie.obj" : $(SOURCE) $(DEP_CPP_UTILI) "$(INTDIR)"
+
+
+
+!ENDIF 
+
diff -u -r --new-file agrep.335/agrep.c agrep.win/agrep.c
--- agrep.335/agrep.c	Thu Dec 11 02:22:17 1997
+++ agrep.win/agrep.c	Fri Jan 02 14:14:47 1998
@@ -215,6 +215,32 @@
 int table[WORD][WORD];
 CHAR *agrep_saved_pattern = NULL;	/* to prevent multiple prepfs for each boolean search: crd@hplb.hpl.hp.com */
 
+#ifdef _WIN32
+#include <direct.h>
+#include <io.h>
+int  agrep_usage();       /* agrep.c */
+int  exec();              /* agrep.c */
+int  exponen();           /* agrep.c */
+int  r_output();          /* agrep.c */
+int  file_out();          /* agrep.c */
+void agrep_online_help(); /* agrephlp.c */
+int  bitap();             /* bitap.c */
+int  fill_buf();          /* bitap.c */
+int  check_file();        /* checkfil.c */
+int  checksg();           /* checksg.c */
+int  get_current_codepage(); /* codepage.c */
+int  compat();            /* compat.c */
+int  maskgen();           /* maskgen.c */
+int  mgrep();             /* newmgrep.c */
+int  prepf();             /* newmgrep.c */
+int  preprocess();        /* preproce.c */
+void destroy_tree();      /* putils.c */
+int  recursive();         /* recursiv.c */
+int  sgrep();             /* sgrep.c */
+int  initialize_common(); /* dummyfil.c */
+int  tuncompressible_filename();   /* dummyfil.c */
+int  quick_tcompress();   /* dummyfil.c */
+#endif
 
 /* Called when multipattern search and pattern has not changed */
 
diff -u -r --new-file agrep.335/agrep.h agrep.win/agrep.h
--- agrep.335/agrep.h	Tue Apr 08 00:50:01 1997
+++ agrep.win/agrep.h	Tue Dec 30 10:15:05 1997
@@ -20,7 +20,9 @@
 #include "defs.h"
 #include "config.h"
 #include <fcntl.h>
+#ifndef _WIN32
 #include <unistd.h>
+#endif
 #include <string.h>
 
 #define	AGREP_ENV_OPTS	"AGREPOPTS"	/* name of the environment variable
diff -u -r --new-file agrep.335/agrephlp.c agrep.win/agrephlp.c
--- agrep.335/agrephlp.c	Tue Apr 08 00:50:01 1997
+++ agrep.win/agrephlp.c	Tue Dec 30 11:37:05 1997
@@ -6,6 +6,11 @@
 
 */
 
+#ifdef _WIN32
+#include "conio.h"
+int get_current_codepage();  /* codepage.c */
+#endif
+
 #define	CUL	0x4B00
 #define CUP	0x4800
 #define CUD	0x5000
@@ -81,7 +86,11 @@
 	if (ch=='\0') ch=(_read_kbd(0,1,1) << 8 );
 	/* no echo; wait for keystroke; Ctrl-C is not ignored */
 #else
+#ifndef _WIN32
 	ch=getchar();
+#else
+	ch=getch();
+#endif
 #endif
 return ch;
 }
@@ -92,7 +101,13 @@
 unsigned int	userwants;
 
 PAGE1:
+#ifdef __EMX__ 
 fprintf(stderr,"\nAGREP %s for %s compiled with EMX 0.9c. Manber/Wu/Gries et al.(%s)\n",AGREP_VERSION,AGREP_OS,AGREP_DATE);
+#else
+#ifdef _WIN32
+fprintf(stderr,"\nAGREP %s for %s compiled with MS VC 5.0 (%s)\n",AGREP_VERSION,AGREP_OS,AGREP_DATE);
+#endif
+#endif 
 fprintf(stderr,"\n           Approximate Pattern Matching GREP -- Get Regular Expression\n");
 fprintf(stderr,"Usage:");
 one_line_help();
@@ -262,8 +277,10 @@
 
 userw;
 
+#ifdef __EMX__
 if ((_emx_env & 0x0A00) == 0x0800) fprintf(stderr,"\n");
 /* if running under pure DOS */ 
+#endif
 
 PAGE7:
 return;
diff -u -r --new-file agrep.335/asearch.c agrep.win/asearch.c
--- agrep.335/asearch.c	Tue Apr 08 00:50:01 1997
+++ agrep.win/asearch.c	Tue Dec 30 10:54:45 1997
@@ -23,6 +23,12 @@
 
 extern int LIMITOUTPUT, LIMITPERFILE;
 
+#ifdef _WIN32
+int  output();            /* agrep.c */
+int  asearch0();          /* asearch.c */
+int  fill_buf();          /* bitap.c */
+#endif
+
 int
 asearch(old_D_pat, text, D)
 CHAR old_D_pat[]; 
diff -u -r --new-file agrep.335/asearch1.c agrep.win/asearch1.c
--- agrep.335/asearch1.c	Tue Apr 08 00:50:01 1997
+++ agrep.win/asearch1.c	Tue Dec 30 10:55:19 1997
@@ -20,6 +20,11 @@
 
 extern int LIMITOUTPUT, LIMITPERFILE;
 
+#ifdef _WIN32
+int  output();            /* agrep.c */
+int  fill_buf();          /* bitap.c */
+#endif
+
 int
 asearch1(old_D_pat, Text, D)
 char old_D_pat[]; 
diff -u -r --new-file agrep.335/bitap.c agrep.win/bitap.c
--- agrep.335/bitap.c	Tue Apr 08 00:50:01 1997
+++ agrep.win/bitap.c	Tue Dec 30 10:59:37 1997
@@ -60,6 +60,16 @@
 
 extern int NEW_FILE, POST_FILTER;
 
+#ifdef _WIN32
+#include <io.h>
+int  output();            /* agrep.c */
+int  re();                /* agrep.c */
+int  re1();               /* agrep.c */
+int  asearch();           /* asearch.c */
+int  asearch1();          /* asearch1.c */
+int  fill_buf();          /* bitap.c */
+#endif
+
 /* bitap dispatches job */
 
 int
diff -u -r --new-file agrep.335/checkfil.c agrep.win/checkfil.c
--- agrep.335/checkfil.c	Tue Apr 08 00:50:01 1997
+++ agrep.win/checkfil.c	Tue Dec 30 10:18:23 1997
@@ -14,6 +14,10 @@
 #include <errno.h>
 #include "checkfil.h"
 
+#ifdef _WIN32
+#include "config.h"
+#endif
+
 #ifndef S_ISREG
 #define S_ISREG(mode) (0100000&(mode))
 #endif
diff -u -r --new-file agrep.335/codepage.c agrep.win/codepage.c
--- agrep.335/codepage.c	Tue Apr 08 00:50:01 1997
+++ agrep.win/codepage.c	Tue Dec 30 11:36:19 1997
@@ -1,3 +1,4 @@
+
 /********************************************************************************
 *  Look-Up-Table for converting characters from upper case to lower case	*
 *  according to a user defined code page translation table			*
@@ -14,7 +15,10 @@
 
 #define INCL_DOSNLS     /* National Language Support values */
 #define INCL_DOSERRORS  /* DOS error values                 */
+
+#ifndef _WIN32
 #include <os2.h>
+#endif
 
 #ifdef __EMX__
 #include <stdlib.h>
diff -u -r --new-file agrep.335/config.h agrep.win/config.h
--- agrep.335/config.h	Tue Apr 08 00:50:01 1997
+++ agrep.win/config.h	Tue Dec 30 10:21:01 1997
@@ -10,3 +10,9 @@
 #define S_ISREG(mode)   (((mode) & (_S_IFMT)) == (_S_IFREG))
 #define S_ISDIR(mode)   (((mode) & (_S_IFMT)) == (_S_IFDIR))
 #endif
+
+#ifdef _WIN32
+#define S_ISDIR(mode) (((mode) & S_IFMT) == S_IFDIR)
+#define S_ISREG(mode) (((mode) & S_IFMT) == S_IFREG)
+#endif 
+
diff -u -r --new-file agrep.335/follow.c agrep.win/follow.c
--- agrep.335/follow.c	Tue Apr 08 00:50:01 1997
+++ agrep.win/follow.c	Tue Dec 30 10:06:39 1997
@@ -9,7 +9,9 @@
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>
+#ifndef _WIN32
 #include <unistd.h>
+#endif
 #include "re.h"
 
 #define TRUE	1
diff -u -r --new-file agrep.335/main.c agrep.win/main.c
--- agrep.335/main.c	Tue Apr 08 00:50:01 1997
+++ agrep.win/main.c	Tue Dec 30 11:01:57 1997
@@ -20,7 +20,15 @@
 extern unsigned int _emx_env;	/* this variable denotes the operating system DOS, OS/2 */
 #endif
 
+#ifdef _WIN32
+int fileagrep();   /* agrep.c */
+#endif
+
+#ifndef _WIN32
 int
+#else
+void
+#endif
 main(argc, argv)
 int argc;
 char *argv[];
diff -u -r --new-file agrep.335/newmgrep.c agrep.win/newmgrep.c
--- agrep.335/newmgrep.c	Wed Oct 22 22:13:19 1997
+++ agrep.win/newmgrep.c	Fri Jan 02 14:14:47 1998
@@ -19,7 +19,12 @@
 #include <sys/stat.h>
 #include "agrep.h"
 #include "codepage.h"
+#ifndef _WIN32
 #include <sys/time.h>
+#else
+#include <sys/timeb.h>
+#include "config.h"
+#endif
 
 extern unsigned char LUT[256];
 
@@ -103,6 +108,13 @@
 extern int anum_terminals;
 extern int AComplexBoolean;
 static void countline();
+
+#ifdef _WIN32
+int  eval_tree();         /* asplit.c */
+int  fill_buf();          /* bitap.c */
+int  monkey1();           /* newmgrep.c */
+int  m_short();           /* newmgrep.c */
+#endif
 
 #if	DOTCOMPRESSED
 /* Equivalent variables for compression search */
diff -u -r --new-file agrep.335/ntdirent.c agrep.win/ntdirent.c
--- agrep.335/ntdirent.c	Wed Dec 31 19:00:00 1969
+++ agrep.win/ntdirent.c	Mon Dec 29 15:41:45 1997
@@ -0,0 +1,288 @@
+/* 
+   dir.c for MS-DOS by Samuel Lam <skl@van-bc.UUCP>, June/87 
+*/ 
+ 
+/* #ifdef WIN32 */
+/* 
+ * @(#)dir.c 1.4 87/11/06 Public Domain. 
+ * 
+ *  A public domain implementation of BSD directory routines for 
+ *  MS-DOS.  Written by Michael Rendell ({uunet,utai}michael@garfield), 
+ *  August 1897 
+ *  Ported to OS/2 by Kai Uwe Rommel 
+ *  December 1989, February 1990 
+ *  Ported to Windows NT 22 May 91 
+ *    other mods Summer '92 brianmo@microsoft.com 
+ *  opendirx() was horribly written, very inefficient, and did not take care
+ *    of all cases.  It is still not too clean, but it is far more efficient.
+ *    Changes made by Gordon Chaffee (chaffee@bugs-bunny.cs.berkeley.edu)
+ */ 
+ 
+ 
+/*Includes: 
+ *	crt 
+ */ 
+#include <windows.h>
+#include <stdlib.h> 
+#include <string.h> 
+#include <sys\types.h> 
+#include <sys\stat.h> 
+#include "ntdirent.h" 
+
+#define stat _stat
+
+/* 
+ *	NT specific 
+ */ 
+#include <stdio.h> 
+ 
+/* 
+ *	random typedefs 
+ */ 
+#define HDIR        HANDLE 
+#define HFILE       HANDLE 
+#define PHFILE      PHANDLE 
+ 
+/* 
+ *	local functions 
+ */ 
+static char *getdirent(char *); 
+static void free_dircontents(struct _dircontents *); 
+ 
+static HDIR				FindHandle; 
+static WIN32_FIND_DATA	FileFindData; 
+ 
+static struct dirent dp; 
+ 
+DIR *opendirx(char *name, char *pattern) 
+{ 
+    struct stat statb; 
+    DIR *dirp; 
+    char c; 
+    char *s; 
+    struct _dircontents *dp; 
+    int len;
+    int unc;
+    char path[ OFS_MAXPATHNAME ]; 
+    register char *ip, *op;
+
+    for (ip = name, op = path; ; op++, ip++) {
+	*op = *ip;
+	if (*ip == '\0') {
+	    break;
+	}
+    }
+    len = ip - name;
+    if (len > 0) {
+	unc = ((path[0] == '\\' || path[0] == '/') &&
+	       (path[1] == '\\' || path[1] == '/'));
+	c = path[len - 1];
+	if (unc) {
+	    if (c != '\\' && c != '/') {
+		path[len] = '/';
+		len++;
+		path[len] ='\0';
+	    }
+	} else {
+	    if ((c == '\\' || c == '/') && (len > 1)) {
+		len--;
+		path[len] = '\0';
+ 
+		if (path[len - 1] == ':' ) {
+		    path[len] = '/'; len++;
+		    path[len] = '.'; len++;
+		    path[len] = '\0';
+		}
+	    } else if (c == ':' ) {
+		path[len] = '.';
+		len++;
+		path[len] ='\0';
+	    }
+	}
+    } else {
+	unc = 0;
+	path[0] = '.';
+	path[1] = '\0';
+	len = 1;
+    }
+ 
+    if (stat(path, &statb) < 0 || (statb.st_mode & S_IFMT) != S_IFDIR) {
+	return NULL; 
+    }
+
+    dirp = malloc(sizeof(DIR));
+    if (dirp == NULL) {
+	return dirp;
+    }
+ 
+    c = path[len - 1];
+    if (c == '.' ) {
+	if (len == 1) {
+	    len--;
+	} else {
+	    c = path[len - 2];
+	    if (c == '\\' || c == ':') {
+		len--;
+	    } else {
+		path[len] = '/';
+		len++;
+	    }
+	}
+    } else if (!unc && ((len != 1) || (c != '\\' && c != '/'))) {
+	path[len] = '/';
+	len++;
+    }
+    strcpy(path + len, pattern);
+ 
+    dirp -> dd_loc = 0; 
+    dirp -> dd_contents = dirp -> dd_cp = NULL; 
+ 
+    if ((s = getdirent(path)) == NULL) {
+	return dirp;
+    }
+ 
+    do 
+    { 
+	if (((dp = malloc(sizeof(struct _dircontents))) == NULL) || 
+	    ((dp -> _d_entry = malloc(strlen(s) + 1)) == NULL)      ) 
+	{ 
+	    if (dp) 
+		free(dp); 
+	    free_dircontents(dirp -> dd_contents); 
+ 
+	    return NULL; 
+	} 
+ 
+	if (dirp -> dd_contents) 
+	    dirp -> dd_cp = dirp -> dd_cp -> _d_next = dp; 
+	else 
+	    dirp -> dd_contents = dirp -> dd_cp = dp; 
+ 
+	strcpy(dp -> _d_entry, s); 
+	dp -> _d_next = NULL; 
+ 
+    } 
+    while ((s = getdirent(NULL)) != NULL); 
+ 
+    dirp -> dd_cp = dirp -> dd_contents; 
+    return dirp; 
+} 
+ 
+DIR *opendir(char *name)
+{
+  return opendirx(name, "*");
+} 
+
+void closedir(DIR * dirp) 
+{ 
+  free_dircontents(dirp -> dd_contents); 
+  free(dirp); 
+} 
+ 
+struct dirent *readdir(DIR * dirp) 
+{ 
+  /* static struct dirent dp; */ 
+  if (dirp -> dd_cp == NULL) 
+    return NULL; 
+ 
+  /*strcpy(dp.d_name,dirp->dd_cp->_d_entry); */ 
+ 
+  dp.d_name = dirp->dd_cp->_d_entry; 
+ 
+  dp.d_namlen = dp.d_reclen = 
+    strlen(dp.d_name); 
+ 
+  dp.d_ino = dirp->dd_loc+1; /* fake the inode */ 
+ 
+  dirp -> dd_cp = dirp -> dd_cp -> _d_next; 
+  dirp -> dd_loc++; 
+ 
+ 
+  return &dp; 
+} 
+ 
+void seekdir(DIR * dirp, long off) 
+{ 
+  long i = off; 
+  struct _dircontents *dp; 
+ 
+  if (off >= 0) 
+  { 
+    for (dp = dirp -> dd_contents; --i >= 0 && dp; dp = dp -> _d_next); 
+ 
+    dirp -> dd_loc = off - (i + 1); 
+    dirp -> dd_cp = dp; 
+  } 
+} 
+ 
+ 
+long telldir(DIR * dirp) 
+{ 
+  return dirp -> dd_loc; 
+} 
+ 
+static void free_dircontents(struct _dircontents * dp) 
+{ 
+  struct _dircontents *odp; 
+ 
+  while (dp) 
+  { 
+    if (dp -> _d_entry) 
+      free(dp -> _d_entry); 
+ 
+    dp = (odp = dp) -> _d_next; 
+    free(odp); 
+  } 
+} 
+/* end of "free_dircontents" */ 
+ 
+static char *getdirent(char *dir) 
+{ 
+    int got_dirent; 
+
+    if (dir != NULL) 
+    {				       /* get first entry */ 
+	if ((FindHandle = FindFirstFile( dir, &FileFindData )) 
+	    == (HDIR)0xffffffff) 
+	{ 
+	    return NULL; 
+	} 
+	got_dirent = 1;
+    } 
+    else				       /* get next entry */ 
+	got_dirent = FindNextFile( FindHandle, &FileFindData ); 
+ 
+    if (got_dirent) 
+	return FileFindData.cFileName; 
+    else 
+    { 
+	FindClose(FindHandle); 
+	return NULL; 
+    } 
+} 
+/* end of getdirent() */ 
+
+struct passwd * _cdecl
+getpwnam(char *name)
+{
+    return NULL;
+}
+
+struct passwd * _cdecl
+getpwuid(int uid)
+{
+    return NULL;
+}
+
+int
+getuid()
+{
+    return 0;
+}
+
+void _cdecl
+endpwent(void)
+{
+}
+
+/* #endif */
diff -u -r --new-file agrep.335/ntdirent.h agrep.win/ntdirent.h
--- agrep.335/ntdirent.h	Wed Dec 31 19:00:00 1969
+++ agrep.win/ntdirent.h	Mon Dec 29 15:38:21 1997
@@ -0,0 +1,56 @@
+/* 
+ * @(#) dirent.h 2.0 17 Jun 91   Public Domain. 
+ * 
+ *  A public domain implementation of BSD directory routines for 
+ *  MS-DOS.  Written by Michael Rendell ({uunet,utai}michael@garfield), 
+ *  August 1987 
+ * 
+ *  Enhanced and ported to OS/2 by Kai Uwe Rommel; added scandir() prototype 
+ *  December 1989, February 1990 
+ *  Change of MAXPATHLEN for HPFS, October 1990 
+ *   
+ *  Unenhanced and ported to Windows NT by Bill Gallagher 
+ *  17 Jun 91 
+ *  changed d_name to char * instead of array, removed non-std extensions 
+ *  
+ *  Cleanup, other hackery, Summer '92, Brian Moran , brianmo@microsoft.com 
+ */ 
+
+#ifndef _DIRENT
+#define _DIRENT
+
+#include <direct.h>
+
+struct dirent 
+{ 
+    ino_t    d_ino;                   /* a bit of a farce */ 
+    short    d_reclen;                /* more farce */ 
+    short    d_namlen;                /* length of d_name */ 
+    char    *d_name;
+}; 
+ 
+struct _dircontents 
+{ 
+    char *_d_entry; 
+    struct _dircontents *_d_next; 
+}; 
+ 
+typedef struct _dirdesc 
+{ 
+    int  dd_id;			   /* uniquely identify each open directory*/ 
+    long dd_loc;			/* where we are in directory entry */ 
+    struct _dircontents *dd_contents;	/* pointer to contents of dir */ 
+    struct _dircontents *dd_cp;		/* pointer to current position */ 
+} 
+DIR; 
+ 
+extern DIR *opendir(char *); 
+extern struct dirent *readdir(DIR *); 
+extern void seekdir(DIR *, long); 
+extern long telldir(DIR *); 
+extern void closedir(DIR *); 
+#define rewinddir(dirp) seekdir(dirp, 0L) 
+
+#endif /* _DIRENT */
+
+/* end of dirent.h */ 
diff -u -r --new-file agrep.335/parse.c agrep.win/parse.c
--- agrep.335/parse.c	Tue Apr 08 00:50:01 1997
+++ agrep.win/parse.c	Tue Dec 30 11:35:09 1997
@@ -4,6 +4,11 @@
    a regular expression, and return a pointer to a syntax
    tree for that regular expression.				*/
 
+#ifdef _WIN32
+#include <memory.h>
+#include <stdlib.h>
+#endif
+
 #include <stdio.h>
 #include "re.h"
 
diff -u -r --new-file agrep.335/preproce.c agrep.win/preproce.c
--- agrep.335/preproce.c	Tue Apr 08 00:50:01 1997
+++ agrep.win/preproce.c	Tue Dec 30 11:09:45 1997
@@ -39,6 +39,14 @@
 extern char FREQ_FILE[MAX_LINE_LEN], HASH_FILE[MAX_LINE_LEN], STRING_FILE[MAX_LINE_LEN];	/* interfacing with tcompress */
 extern int AComplexBoolean;
 
+#ifdef _WIN32
+int  asplit_pattern();       /* asplit.c */
+int  asplit_terminal();      /* asplit.c */
+int  init();                 /* follow.c */
+void destroy_tree();         /* putils.c */
+int  quick_tcompress();      /* preproce.c */
+#endif
+
 int
 preprocess(D_pattern, Pattern)   /* need two parameters  */
 CHAR D_pattern[], Pattern[];
diff -u -r --new-file agrep.335/recursiv.c agrep.win/recursiv.c
--- agrep.335/recursiv.c	Tue Apr 08 00:50:01 1997
+++ agrep.win/recursiv.c	Tue Dec 30 11:56:15 1997
@@ -30,7 +30,11 @@
 
 #if HAVE_DIRENT_H
 
+#ifndef _WIN32
 # include <dirent.h>
+#else
+# include "ntdirent.h"
+#endif
 # define NAMLEN(dirent) strlen((dirent)->d_name)
 #else
 # define dirent direct
@@ -50,6 +54,14 @@
 
 #endif
 
+#ifdef _WIN32
+#include "config.h"
+#include <string.h>
+#include <malloc.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+int  exec();    /* agrep.c */
+#endif
 
 #include <sys/stat.h>
 #include <fcntl.h>
@@ -140,11 +152,15 @@
 	printf(" In treewalk. name= %s\n",name);
 #endif
 
+#ifndef _WIN32
 	if(lstat(name, &stbuf) == -1) {
+#else
+        if(stat(name, &stbuf) != 0) {
+#endif
 		fprintf(stderr, "permission denied or non-existent: %s\n", name);
 		return;
 	}
-
+#ifndef _WIN32
 	if ((stbuf.st_mode & S_IFMT) == S_IFLNK)  {
 
 #ifdef REC_DIAG	
@@ -153,7 +169,7 @@
 
 		return;
 	}
-
+#endif
 	if (( stbuf.st_mode & S_IFMT) == S_IFDIR) {
 
 #ifdef REC_DIAG	
diff -u -r --new-file agrep.335/sgrep.c agrep.win/sgrep.c
--- agrep.335/sgrep.c	Tue Apr 08 00:50:01 1997
+++ agrep.win/sgrep.c	Tue Dec 30 11:20:45 1997
@@ -71,7 +71,11 @@
 #define W_DELIM		128
 #endif
 
+#ifndef _WIN32
 #include <sys/time.h>
+#else
+#include <sys/timeb.h>
+#endif
 
 extern int tuncompressible();
 extern int quick_tcompress();
@@ -111,6 +115,18 @@
 extern int EASYSEARCH;
 extern char FREQ_FILE[MAX_LINE_LEN], HASH_FILE[MAX_LINE_LEN], STRING_FILE[MAX_LINE_LEN];
 
+#ifdef _WIN32
+int  fill_buf();          /* bitap.c */
+int  a_monkey();          /* sgrep.c */
+int  agrep();             /* sgrep.c */
+int  bm();                /* sgrep.c */
+int  blog();              /* sgrep.c */
+int  monkey();            /* sgrep.c */
+int  monkey4();           /* sgrep.c */
+int  s_output();          /* sgrep.c */
+int  verify();            /* sgrep.c */
+#endif
+
 #if	MEASURE_TIMES
 /* timing variables */
 extern int OUTFILTER_ms;
@@ -951,6 +967,9 @@
 			/* shift = 1;			[del] [TG] */
 			shift = SHIFT[*text];	/* 	[new] [TG] */
 CONT:						/*	now here to restart the skip-loop */
+#ifdef _WIN32
+;
+#endif 
 		}
 		else shift = d1;
 	}
diff -u -r --new-file agrep.335/target agrep.win/target
--- agrep.335/target	Mon Dec 08 22:22:07 1997
+++ agrep.win/target	Fri Jan 02 14:14:47 1998
@@ -6,4 +6,4 @@
 teletubbies
 coat nail
 happy xmas
- 
\ No newline at end of file
+ 
diff -u -r --new-file agrep.335/utilitie.c agrep.win/utilitie.c
--- agrep.335/utilitie.c	Tue Apr 08 00:50:01 1997
+++ agrep.win/utilitie.c	Tue Dec 30 11:22:39 1997
@@ -6,6 +6,12 @@
 #include <ctype.h>
 #include "re.h"
 
+#ifdef _WIN32
+#include <malloc.h>
+#include <process.h>
+#include <string.h>
+#endif
+
 /************************************************************************/
 /*                                                                      */
 /*  the following routines implement an abstract data type "stack".	*/
diff -u -r --new-file agrep.335/version.h agrep.win/version.h
--- agrep.335/version.h	Thu Dec 11 01:55:57 1997
+++ agrep.win/version.h	Fri Jan 02 14:14:47 1998
@@ -53,4 +53,8 @@
 #define AGREP_OS	"VPMI"
 #endif
 
+#ifdef _WIN32
+#define AGREP_OS	"WIN32"
+#endif
+
 #define AGREP_DATE	__DATE__
